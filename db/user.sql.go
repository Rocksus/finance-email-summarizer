// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteUserAPIKey = `-- name: DeleteUserAPIKey :exec
UPDATE user_api_key
SET deleted_at = CURRENT_TIMESTAMP
WHERE api_key_id = $1
`

func (q *Queries) DeleteUserAPIKey(ctx context.Context, apiKeyID string) error {
	_, err := q.db.Exec(ctx, deleteUserAPIKey, apiKeyID)
	return err
}

const getUserAPIKey = `-- name: GetUserAPIKey :one
SELECT 
    api_key_id,
    api_secret_hash,
    identifier,
    created_at,
    deleted_at
FROM user_api_key
WHERE api_key_id = $1
`

func (q *Queries) GetUserAPIKey(ctx context.Context, apiKeyID string) (UserApiKey, error) {
	row := q.db.QueryRow(ctx, getUserAPIKey, apiKeyID)
	var i UserApiKey
	err := row.Scan(
		&i.ApiKeyID,
		&i.ApiSecretHash,
		&i.Identifier,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const insertUserAPIKey = `-- name: InsertUserAPIKey :one
INSERT INTO user_api_key (
    api_key_id,
    api_secret_hash,
    identifier,
    created_at
) VALUES (
    $1,
    $2,
    $3,
    $4
) RETURNING api_key_id, api_secret_hash, identifier, created_at, deleted_at
`

type InsertUserAPIKeyParams struct {
	ApiKeyID      string
	ApiSecretHash string
	Identifier    string
	CreatedAt     pgtype.Timestamptz
}

func (q *Queries) InsertUserAPIKey(ctx context.Context, arg InsertUserAPIKeyParams) (UserApiKey, error) {
	row := q.db.QueryRow(ctx, insertUserAPIKey,
		arg.ApiKeyID,
		arg.ApiSecretHash,
		arg.Identifier,
		arg.CreatedAt,
	)
	var i UserApiKey
	err := row.Scan(
		&i.ApiKeyID,
		&i.ApiSecretHash,
		&i.Identifier,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const insertUserAuth = `-- name: InsertUserAuth :exec
INSERT INTO user_auth (
    user_id,
    password_hash
) VALUES (
    $1,
    $2
)
`

type InsertUserAuthParams struct {
	UserID       int64
	PasswordHash pgtype.Text
}

func (q *Queries) InsertUserAuth(ctx context.Context, arg InsertUserAuthParams) error {
	_, err := q.db.Exec(ctx, insertUserAuth, arg.UserID, arg.PasswordHash)
	return err
}

const insertUserData = `-- name: InsertUserData :one
INSERT INTO user_data (
    name,
    username,
    email
) VALUES (
    $1,
    $2,
    $3
) RETURNING user_id, name, username, email, created_at, updated_at
`

type InsertUserDataParams struct {
	Name     string
	Username string
	Email    string
}

func (q *Queries) InsertUserData(ctx context.Context, arg InsertUserDataParams) (UserDatum, error) {
	row := q.db.QueryRow(ctx, insertUserData, arg.Name, arg.Username, arg.Email)
	var i UserDatum
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
